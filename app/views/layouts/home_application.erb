<!DOCTYPE html>
<html lang="pt">
  <head>
    <title>Template</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <!-- Metadados  -->
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <% # Dependências CSS %>
    <%= stylesheet_link_tag "landing_page",                                  "data-turbo-track": "reload" %>
    <% # App JS do projeto %>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;500;600;700;800&family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  </head>
  <body class="">
    <%= yield %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="script.js"></script>
    <script>
      // Smooth scrolling for navigation links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
              target.scrollIntoView({
                  behavior: 'smooth',
                  block: 'start'
              });
          }
      });
      });

      // Active navigation highlighting
      window.addEventListener('scroll', function() {
      const sections = document.querySelectorAll('section[id]');
      const navLinks = document.querySelectorAll('.nav-menu a[href^="#"]');

      let current = '';
      sections.forEach(section => {
          const sectionTop = section.offsetTop;
          const sectionHeight = section.clientHeight;
          if (scrollY >= (sectionTop - 200)) {
              current = section.getAttribute('id');
          }
      });

      navLinks.forEach(link => {
          link.classList.remove('active');
          if (link.getAttribute('href') === '#' + current) {
              link.classList.add('active');
          }
      });
      });

      // Newsletter form submission
      document.querySelector('.newsletter-form').addEventListener('submit', function(e) {
      e.preventDefault();
      const email = this.querySelector('input[type="email"]').value;

      // Simulate form submission
      const button = this.querySelector('button');
      const originalText = button.textContent;

      button.textContent = 'Cadastrando...';
      button.disabled = true;

      setTimeout(() => {
          button.textContent = 'Cadastrado!';
          button.style.background = 'var(--success-color)';

          setTimeout(() => {
              button.textContent = originalText;
              button.disabled = false;
              button.style.background = '';
              this.querySelector('input[type="email"]').value = '';
          }, 2000);
      }, 1000);
      });

      // Real-time activity updates simulation
      function updateActivityFeed() {
      const activities = [
          {
              type: 'novo-aluno',
              text: '<strong>Ana Costa</strong> se inscreveu na turma Feminina',
              time: 'Agora'
          },
          {
              type: 'presenca',
              text: '<strong>32 alunos</strong> registraram presença na Turma Kids',
              time: 'Há 5 minutos'
          },
          {
              type: 'certificado',
              text: '<strong>Pedro Santos</strong> recebeu certificado de Faixa Roxa',
              time: 'Há 10 minutos'
          }
      ];

      const activityFeed = document.querySelector('.activity-feed');
      if (activityFeed) {
          // Simulate new activity every 30 seconds
          setInterval(() => {
              const randomActivity = activities[Math.floor(Math.random() * activities.length)];
              const newActivity = document.createElement('div');
              newActivity.className = 'activity-item';
              newActivity.innerHTML = `
                  <div class="activity-icon ${randomActivity.type}"></div>
                  <div class="activity-content">
                      <p>${randomActivity.text}</p>
                      <time>${randomActivity.time}</time>
                  </div>
              `;

              activityFeed.insertBefore(newActivity, activityFeed.firstChild);

              // Remove oldest activity if more than 4
              if (activityFeed.children.length > 4) {
                  activityFeed.removeChild(activityFeed.lastChild);
              }

              // Add entrance animation
              newActivity.style.opacity = '0';
              newActivity.style.transform = 'translateX(-20px)';
              setTimeout(() => {
                  newActivity.style.transition = 'all 0.3s ease';
                  newActivity.style.opacity = '1';
                  newActivity.style.transform = 'translateX(0)';
              }, 100);
          }, 30000);
      }
      }

      // Initialize activity updates
      updateActivityFeed();

      // Stats counter animation
      function animateCounters() {
      const counters = document.querySelectorAll('.stat-number');

      counters.forEach(counter => {
          const target = parseInt(counter.textContent.replace(/[^\d]/g, ''));
          const duration = 2000;
          const step = target / (duration / 16);
          let current = 0;

          const timer = setInterval(() => {
              current += step;
              if (current >= target) {
                  counter.textContent = target.toLocaleString();
                  clearInterval(timer);
              } else {
                  counter.textContent = Math.floor(current).toLocaleString();
              }
          }, 16);
      });
      }

      // Trigger counter animation when stats come into view
      const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
          if (entry.isIntersecting) {
              animateCounters();
              observer.unobserve(entry.target);
          }
      });
      });

      const statsWidget = document.querySelector('.stats-widget');
      if (statsWidget) {
      observer.observe(statsWidget);
      }

      // Image lazy loading and error handling
      document.querySelectorAll('img').forEach(img => {
      img.addEventListener('error', function() {
          this.src = '/placeholder.svg?height=400&width=600&text=Imagem+Indisponível';
      });
      });

      // Mobile menu toggle (if needed)
      const navToggle = document.querySelector('.navbar-toggler');
      if (navToggle) {
      navToggle.addEventListener('click', function() {
          const navMenu = document.querySelector('.nav-menu');
          navMenu.classList.toggle('show');
      });
      }

      // Search functionality (placeholder)
      function initSearch() {
      const searchInput = document.querySelector('#search-input');
      if (searchInput) {
          searchInput.addEventListener('input', function(e) {
              const query = e.target.value.toLowerCase();
              // Implement search logic here
              console.log('Searching for:', query);
          });
      }
      }

      initSearch();

      // Print functionality
      function printArticle() {
      window.print();
      }

      // Social sharing
      function shareArticle(platform) {
      const url = window.location.href;
      const title = document.querySelector('.story-title').textContent;

      let shareUrl = '';

      switch(platform) {
          case 'facebook':
              shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
              break;
          case 'twitter':
              shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`;
              break;
          case 'whatsapp':
              shareUrl = `https://wa.me/?text=${encodeURIComponent(title + ' ' + url)}`;
              break;
      }

      if (shareUrl) {
          window.open(shareUrl, '_blank', 'width=600,height=400');
      }
      }

      // Initialize all functionality when DOM is loaded
      document.addEventListener('DOMContentLoaded', function() {
      console.log('Portal Novos Recomeços carregado com sucesso!');
      });
    </script>
  </body>
</html>